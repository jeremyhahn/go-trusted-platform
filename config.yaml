# Trusted Platform Configuration File


# Global platform
debug: true
config-dir: ./db/config
data-dir: ./db/data
cert-dir: ./db/certs
log-dir: ./logs/

# The platform domain name
domain: example.com

# The hostmaster responsible for the platform
hostmaster: root@example.com


# Remote Attestation
attestation:
  # The Verifier / Service Provider domain
  # service: attestor.example.com
  
  # During the initial "upgrade" from an insecure connection to mTLS,
  # the Attestor's gRPC TLS server certificate is verified by the Verifier
  # using the Verifier's Operating System and Certificate Authority trust
  # stores.
  #
  # If the Attestor's server certificate can't be verified by either store,
  # that means the Attestor's gRPC service is not using a server certificate
  # issued from a public trusted CA that's already trusted by the Operating
  # System trusted certificate store, or a server certificate issued by the
  # Verifier / Service Provider Certificate Authority. Setting
  # allow-attestor-self-ca to true will allow the Attestor to use their own
  # private CA bundle, which is provided during the initial mTLS negotiation
  # / "upgrade" process that takes place on the insecure gRPC port. Setting
  # this to false requires the client to use either a server certificate issued
  # by a public trusted CA (and therefore trusted by the operating system) or
  # a certificate that's been issued by the Verifier / Service Provider
  # Certificate Authority.
  #
  # Setting this option to true DOES NOT import the Attestor's CA bundle
  # into the Verifier / Service Provider's Certificate Authority. It is only
  # used to encrypt the Remote# Attestation mTLS gRPC connection. After Remote
  # Attestaion is complete, the CA certificates are discarded.
  #
  # The mTLS connection encrypts the Remote Attestation communication between
  # the Verifier and Attestor to ensure privacy and prevents man-in-the-middle
  # attacks. In addition, requiring the Attestor's gRPC server to use a 
  # certificate issued by the Verifier / Service Provider's Certificate Authority
  # provides another point of authorization and access control for the Verifier /
  # Service Provider to control the clients that are allowed to connect to the
  # network to gain access to services and resources.
  # 
  # Setting this to true allows the Verifier / Service Provider to negotiate
  # an initial encrypted mTLS gRPC connection with any Attestor who presents
  # a valid CA certificate bundle, whether it was issued from a public trusted
  # Certificate Authority, or the Verifier / Service Provider's Certificate
  # Authority. Enabling this means we will accept the Attestor's own self-signed
  # Certificate Authority Root and/or Intermediate bundle that was used to sign
  # their gRPC TLS server certificate.
  allow-attestor-self-ca: true

  # The Attestor's CA certificate bundle (Root CA or Root & Intermediate(s) bundle)
  # client-ca-cert: ../attestor/db/certs/intermediate-ca/intermediate-ca.bundle.crt

  # gRPC ports used by the Verifier and Attestor
  # to perform Remote Attestation
  tls-port: 8082
  insecure-port: 8083
  
  # Skip TLS verification:
  # Turning this on can be helpful when testing and 
  # debugging TLS connections, but should never be used
  # in production due to exposure to man-in-the-middle
  # attacks.
  insecure-skip-verify: false

  # Defines the verifiers that are allowed to connect to the
  # attestors gRPC service. TLS certificates provided by
  # verifiers must be issued to a common or SANS name
  # on this list or the connection is refused with
  # ErrUnknownVerifier
  allowed-verifiers:
    - verifier.example.com

  # The Storage Root Key (SRK) password. This should never
  # be set in a production environment, but is useful during
  # testing and development.
  srk-auth: my-secret

  # The Attestor Endorsement Key Certificate form. Can be 
  # either TSS or PEM.
  ek-cert-form: PEM


# Trusted Platform Module
tpm:
  device: /dev/tpmrm0
  # Encrypt CPU <-> TPM bus communication
  encrypt-sessions: true
  entropy: false
  ek-cert-index: 0x01C00002
  ek-cert: ECcert.bin
  # Use TPM Simulator instead of real TPM
  simulator: true
  auto-import-ek-certs: true


# Certificate Authority
certificate-authority:
  auto-import-issuing-ca: true
  system-cert-pool: true
  identity:
  - key-size: 2048
     # CA cert expiration (years)
    valid: 50
    subject:
      cn: root-ca
      organization: ACME Corproation
      country: US
      province: Miami
      locality: Homestead
      address: 123 Virtual Street
      postal-code: 12345
    sans:
      dns: 
        - example.com
        - root-ca
        - root-ca.localdomain
        - root-ca.dev.example.com
      ips:
        - 127.0.0.1
      email:
        - root@localhost
        - root@localhost.localdomain
  - key-size: 2048
     # CA cert expiration (years)
    valid: 10
    subject:
      cn: intermediate-ca
      organization: ACME Corproation
      country: US
      province: Miami
      locality: Homestead
      address: 123 Virtual Street
      postal-code: 12345
    sans:
      dns:
        - example.com
        - intermediate-ca
        - intermediate-ca.localdomain
        - intermediate-ca.example.com
      ips:
        - 127.0.0.1
      email:
        - root@localhost
        - root@localhost.localdomain


# Web Services
webservice:
  port: 8080
  tls-port: 8443
  jwt-expiration: 525960
  tls-ca: certs/intermediate-ca.pub
  tls-key: certs/intermediate-ca.key
  tls-crt: certs/issued/localhost/localhost.crt
  certificate:
    key-size: 2048
    # valid 365 days
    valid: 365
    subject:
      cn: localhost
      organization: ACME Corproation
      country: US
      province: Miami
      locality: Homestead
      address: 123 Virtual Street
      postal-code: 12345
    sans:
      dns:
        - example.com
        - localhost
        - localhost.localdomain
      ips:
        - 127.0.0.1
      email:
        - root@localhost
        - root@localhost.localdomain
