# Trusted Platform Configuration File


# Global platform configs
debug: true
debug-secrets: false
platform-dir: trusted-data
config-dir: trusted-data/etc
log-dir: trusted-data/log

# The platform domain name
domain: example.com

# The hostmaster responsible for the platform
hostmaster: root@example.com

# Trusted Platform administrators perform authentication via the
# Certificate Authority. 2 passwords are required to setup and 
# subsequently access the platform. The Root password is used to
# password protect the Root Certifiate Authority Private Key. The
# Operator password is used to password protect the first
# Intermediate Certifiate Authority that is created by default during
# platform setup. After setup, the Root Certificate Authority Private
# Key should be remove from the system and taken offline. Future operations
# should be performed using an Intermediate Certificate Authority, either
# the default created during setup, or an additional created after setup.
#
# Passwords should never be set here in a production environment, however,
# can be useful during testing and development.
root-password: 
intermediate-password:
server-password:

# Regular Expression that defines password complexity requirements
# for private keys. A few examples:
# 
# Minimum 10 characters, uppercase and lowercase letters, and numbera (no symbols)
# ^[a-zA-Z0-9]{10,}$
# 
# Minimum 10 characters, uppercase and lowercase letters, numbers and symbols
# ^[a-zA-Z0-9-_!@#$%^&*() /\\\\+]{10,}$
#
# Minimum 10 characters, max 20, uppercase and lowercase lettes, numbers and symbols
# ^[a-zA-Z0-9-_!@#$%^&*() /\\\\+.]{10,20}$
#
# Allow all:
# ^*$
password-policy: '^[a-zA-Z0-9-_!@#$%^&*() /\\\\+.]{10,20}$'


# Remote Attestation
attestation:
  # During the initial "upgrade" from an insecure connection to mTLS,
  # the Attestor's gRPC TLS server certificate is verified by the Verifier
  # using the Verifier's Certificate Authority (and optionally) Operating
  # System trusted certificates store.
  #
  # If the Attestor's server certificate can't be verified by either store,
  # that means the Attestor's gRPC service is not using a server certificate
  # issued from a public trusted CA that's already trusted by the Verifier's
  # Certificate Authority or Operating System trusted certificate store,
  # or a server certificate issued by the Verifier / Service Provider
  # Certificate Authority. Setting allow-attestor-self-ca to true allows the
  # Attestor to use their own private CA bundle, which the Attestor provides
  # during the initial mTLS negotiation / "upgrade" process that takes place
  # on the insecure gRPC port. Setting this to false requires the client either
  # use a server certificate issued by a public trusted CA (and therefore trusted
  # by the operating system) or a certificate that's been issued by the Verifier
  # / Service Provider Certificate Authority.
  #
  # Setting this option to true DOES NOT import the Attestor's CA bundle
  # into the Verifier / Service Provider's Certificate Authority. It is only
  # used to verify and encrypt the Remote Attestation mTLS gRPC connection.
  # After Remote Attestaion is complete, the CA certificates are discarded.
  #
  # The mTLS connection encrypts the Remote Attestation communication between
  # the Verifier and Attestor to ensure privacy and prevent man-in-the-middle
  # attacks. In addition, requiring the Attestor's gRPC server to use a 
  # certificate issued by the Verifier / Service Provider's Certificate Authority
  # allows the Verifier to control which Attestors are authorized to perform
  # Remote Attestation. In this scenerio, a server / device certificate must be
  # issued to the Attestor by the Verifier / Service Provider Certifiate Authority
  # using some other manual or automated provisioning process before the Attestor
  # can perform Remote Attestation for the first time.
  allow-attestor-self-ca: false

  # When enabled, Open Enrollment creates an attestation policy for the Attestor
  # using the current state of TPM PCRs, EventLog, and Secure Boot, and issues
  # an x509 Certificate for the Attestation Key used during Remote Attestation.
  # If disabled, an attestation policy and x509 certificate must be created using
  # some other manual or automated process prior to the Attestor performing Remote
  # Attestation so the Remote Attestation process is able to load the policy and
  # certificate to verify the Attestor.
  allow-open-enrollment: false

  # gRPC ports used by the Verifier and Attestor
  # to perform Remote Attestation
  tls-port: 8082
  insecure-port: 8083
  
  # Skip TLS verification:
  # Turning this on can be helpful when testing and 
  # debugging TLS connections, but should never be used
  # in production due to exposure to man-in-the-middle
  # attacks.
  insecure-skip-verify: false

  # Defines the verifiers that are allowed to connect to the
  # attestors gRPC service. TLS certificates provided by
  # verifiers must be issued to a common or SANS name
  # on this list or the connection is refused with
  # ErrUnknownVerifier
  allowed-verifiers:
    - verifier.example.com

  # The Attestor Endorsement Key Certificate form. Can be 
  # either TSS or PEM.
  ek-cert-form: PEM

  # PCRs used for Quote/Verify
  quote-pcrs: 0,1,2,3,4,5,6,7,8,9


# Trusted Platform Module
tpm:
  device: /dev/tpmrm0

  # Encrypt CPU <-> TPM bus communication
  encrypt-sessions: true
  
  # Use TPM for entropy operations (random source)
  entropy: true
  
  # Location of EK cert in NVRAM
  ek-cert-index: 0x01C00002
  
  # Name of EK cert (if loading from file system / tpm2_getekcertificate)
  ek-cert: ../ECcert.bin
  
  # Use TPM Simulator instead of real TPM
  simulator: true
  
  # Automatically import EK Platform (Manufacturer) Certificate(s) into trust store
  auto-import-ek-certs: true

  # PCRs to use for local attestation
  # https://uapi-group.org/specifications/specs/linux_tpm_pcr_registry/
  attestation-pcrs: 7,8,9,14



# Certificate Authority
certificate-authority:
  # The Certifiate Authority home directory
  home: trusted-data/ca
  
  # Automatically download and import Issuing CAs
  # when importing leaf certificates, so the leaf
  # can be verified.
  auto-import-issuing-ca: false
  
  # Use the Operating System trusted certificate store
  # when verifying certificates. If disabled, only
  # certificates in the Certificate Authority will be
  # trusted and used for verifying leaf certificates.
  system-cert-pool: false
  
  # How long issued client certificates are valid (days)
  issued-valid: 365
  
  # Set to true to include "localhost" in SANS names
  sans-include-localhost: true
  
  # Delete revoked certificates. They can be safely
  # discarded after revocation, but you may want them
  # retained, for example, some external audit process,
  # or the ability to confirm the certificate has been
  # revoked without having to parse the CA's Revocation
  # List.
  delete-revoked-certificates: false
  
  # The private key store.
  # PKCS #8 file store is the only supported store at this time
  key-store: PKCS8

  # The default hash function for signing and encryption opreations
  # Supported hash functions: Any valid crypto.Hash
  # https://pkg.go.dev/crypto#Hash
  hash: SHA256

  # Default RSA padding scheme for RSA keys
  # Supported schemes: RSA_PSS | RSA_PKCS1v15
  rsa-scheme: RSA_PSS
 
  # The default algorithm to use when creating keys and certificates
  # Supported algorithms: RSA, ECC
  key-algorithm: RSA

  # The default signature algorithm
  # Any fully supported Go x509 SignatureAlgorithm:
  # https://pkg.go.dev/crypto/x509#SignatureAlgorithm
  signature-algorithm: SHA256WithRSA
  
  # The Elliptical Curve Cryptography Curve
  # Supported curves: P224, P256, P384, P521
  elliptic-curve: P256
  
  # Requires passwords for private keys (FIPS 140-3)
  require-pkcs8-password: true
  
  # The password policy for private key passwords. Set to "inherit"
  # to use the global password policy.
  password-policy: inherit
  
  # True to retain revoked certificates, false to delete
  retain-revoked-certificates: true

  # The Certificate Authority identity
  identity:
  - key-size: 2048
     # CA cert expiration (years)
    valid: 50
    subject:
      cn: root-ca.example.com
      organization: Example Corporation
      country: US
      province: Example
      locality: Homestead
      address: 123 Virtual Street
      postal-code: 12345
    sans:
      dns: 
        - root-ca.example.com
        - example.com
        - root-ca
        - root-ca.localdomain
        - root-ca.dev.example.com
      ips:
        - 127.0.0.1
      email:
        - root@localhost
        - root@localhost.localdomain
  - key-size: 2048
     # CA cert expiration (years)
    valid: 10
    subject:
      cn: intermediate-ca.example.com
      organization: Example Corporation
      country: US
      province: Example
      locality: Homestead
      address: 123 Virtual Street
      postal-code: 12345
    sans:
      dns:
        - intermediate-ca.example.com
        - example.com
        - intermediate-ca
        - intermediate-ca.localdomain
      ips:
        - 127.0.0.1
      email:
        - root@localhost
        - root@localhost.localdomain


# Web Services
webservice:
  port: 8080
  tls-port: 8443
  jwt-expiration: 525960
  tls-ca: trusted-data/ca/intermediate-ca.example.com.pub
  tls-key: trusted-data/ca/intermediate-ca.example.com.key
  tls-crt: trusted-data/ca/issued/localhost/localhost.crt
  certificate:
    # The password for the web service TLS private key.
    # This should never be configured in a production
    # environment but it's useful for testing and development.
    private-key-password: 
    key-size: 2048
    # valid 365 days
    valid: 365
    subject:
      cn: www.example.com
      organization: Example Corporation
      country: US
      province: Example
      locality: Homestead
      address: 123 Virtual Street
      postal-code: 12345
    sans:
      dns:
        - www.example.com
        - example.com
        - localhost
        - localhost.localdomain
      ips:
        - 127.0.0.1
      email:
        - root@localhost
        - root@localhost.localdomain


# Argon2 Password Hashing
# https://github.com/P-H-C/phc-winner-argon2
# https://pkg.go.dev/golang.org/x/crypto/argon2
argon2:
  memory: 19
  iterations: 2
  parallelism: 1
  saltLen: 16
  keyLen: 32