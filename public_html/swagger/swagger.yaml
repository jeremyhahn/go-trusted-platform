basePath: /api/v1
definitions:
  app.App:
    properties:
      argon2:
        $ref: '#/definitions/argon2.Argon2Config'
      attestation:
        $ref: '#/definitions/config.Attestation'
      certificate_authority:
        $ref: '#/definitions/ca.Config'
      config_dir:
        type: string
      debug:
        type: boolean
      debug-secrets:
        type: boolean
      domain:
        type: string
      hostmaster:
        type: string
      hostname:
        type: string
      listen:
        type: string
      log_dir:
        type: string
      platform_dir:
        type: string
      runtime_user:
        type: string
      tpm:
        $ref: '#/definitions/tpm2.Config'
      webservice:
        $ref: '#/definitions/config.WebService'
    type: object
  argon2.Argon2Config:
    properties:
      iterations:
        type: integer
      keyLen:
        type: integer
      memory:
        type: integer
      parallelism:
        type: integer
      saltLen:
        type: integer
    type: object
  ca.Config:
    properties:
      auto_import_issuing_ca:
        type: boolean
      default_validity:
        type: integer
      identity:
        items:
          $ref: '#/definitions/ca.Identity'
        type: array
      platform_ca:
        type: integer
      require-password:
        type: boolean
      sans_include_localhost:
        type: boolean
      system_cert_pool:
        type: boolean
    type: object
  ca.Identity:
    properties:
      keys:
        items:
          $ref: '#/definitions/keystore.KeyConfig'
        type: array
      keystores:
        $ref: '#/definitions/platform.KeyringConfig'
      sans:
        $ref: '#/definitions/ca.SubjectAlternativeNames'
      subject:
        $ref: '#/definitions/ca.Subject'
      valid:
        type: integer
    type: object
  ca.Subject:
    properties:
      address:
        type: string
      cn:
        type: string
      country:
        type: string
      locality:
        type: string
      organization:
        type: string
      organizational_unit:
        type: string
      postal_code:
        type: string
      province:
        type: string
    type: object
  ca.SubjectAlternativeNames:
    properties:
      dns:
        items:
          type: string
        type: array
      email:
        items:
          type: string
        type: array
      ips:
        items:
          type: string
        type: array
    type: object
  config.Attestation:
    properties:
      allow-open-enrollment:
        type: boolean
      allow_attestor_self_ca:
        type: boolean
      allowed_verifiers:
        items:
          type: string
        type: array
      insecure_port:
        type: integer
      insecure_skip_verify:
        type: boolean
      quote-pcrs:
        items:
          type: integer
        type: array
      tls_port:
        type: integer
    type: object
  config.Identity:
    properties:
      sans:
        $ref: '#/definitions/ca.SubjectAlternativeNames'
      subject:
        $ref: '#/definitions/ca.Subject'
      valid:
        type: integer
    type: object
  config.JWT:
    properties:
      expiration:
        type: integer
      issuer:
        type: string
    type: object
  config.WebAuthn:
    properties:
      display_name:
        type: string
      id:
        type: string
      origins:
        items:
          type: string
        type: array
    type: object
  config.WebService:
    properties:
      certificate:
        $ref: '#/definitions/config.Identity'
      home:
        type: string
      jwt:
        $ref: '#/definitions/config.JWT'
      key:
        $ref: '#/definitions/keystore.KeyConfig'
      port:
        type: integer
      tls_port:
        type: integer
      webauthn:
        $ref: '#/definitions/config.WebAuthn'
    type: object
  jwt.JsonWebTokenClaims:
    properties:
      aud:
        description: the `aud` (Audience) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.3
        items:
          type: string
        type: array
      exp:
        allOf:
        - $ref: '#/definitions/jwt.NumericDate'
        description: the `exp` (Expiration Time) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.4
      iat:
        allOf:
        - $ref: '#/definitions/jwt.NumericDate'
        description: the `iat` (Issued At) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.6
      iss:
        description: the `iss` (Issuer) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.1
        type: string
      jti:
        description: the `jti` (JWT ID) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.7
        type: string
      nbf:
        allOf:
        - $ref: '#/definitions/jwt.NumericDate'
        description: the `nbf` (Not Before) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.5
      orgs:
        description: Email          string
        items:
          type: integer
        type: array
      sub:
        description: the `sub` (Subject) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.2
        type: string
      svcs:
        items:
          type: integer
        type: array
      uid:
        type: integer
      webAuthnClaims:
        $ref: '#/definitions/webauthn.SessionData'
    type: object
  jwt.NumericDate:
    properties:
      time.Time:
        type: string
    type: object
  keystore.ECCConfig:
    properties:
      curve:
        type: string
    type: object
  keystore.KeyConfig:
    properties:
      algorithm:
        type: string
      cn:
        type: string
      debug:
        type: boolean
      default:
        type: boolean
      ecc:
        $ref: '#/definitions/keystore.ECCConfig'
      hash:
        type: string
      parent:
        $ref: '#/definitions/keystore.KeyConfig'
      password:
        type: string
      platform-policy:
        type: boolean
      rsa:
        $ref: '#/definitions/keystore.RSAConfig'
      secret:
        type: string
      signature-algorithm:
        type: string
      store:
        type: string
    type: object
  keystore.RSAConfig:
    properties:
      size:
        type: integer
    type: object
  pkcs8.Config:
    properties:
      cn:
        type: string
      platform_policy:
        type: boolean
    type: object
  pkcs11.Config:
    properties:
      cn:
        type: string
      config:
        type: string
      label:
        type: string
      library:
        type: string
      pin:
        type: string
      platform_policy:
        type: boolean
      slot:
        type: integer
      so_pin:
        type: string
    type: object
  platform.KeyringConfig:
    properties:
      cn:
        type: string
      pkcs8:
        $ref: '#/definitions/pkcs8.Config'
      pkcs11:
        $ref: '#/definitions/pkcs11.Config'
      tpm2:
        $ref: '#/definitions/tpm2.KeyStoreConfig'
    type: object
  protocol.AuthenticationExtensions:
    additionalProperties: {}
    type: object
  protocol.UserVerificationRequirement:
    enum:
    - required
    - preferred
    - discouraged
    type: string
    x-enum-comments:
      VerificationPreferred: This is the default
    x-enum-varnames:
    - VerificationRequired
    - VerificationPreferred
    - VerificationDiscouraged
  response.WebServiceResponse:
    properties:
      code:
        type: integer
      error:
        type: string
      payload: {}
      success:
        type: boolean
    type: object
  service.UserCredential:
    properties:
      authType:
        type: integer
      email:
        type: string
      org:
        type: integer
      password:
        type: string
    type: object
  tpm2.Config:
    properties:
      device:
        type: string
      ek:
        $ref: '#/definitions/tpm2.EKConfig'
      encrypt_sessions:
        type: boolean
      entropy:
        type: boolean
      file_integrity:
        items:
          type: string
        type: array
      hash:
        type: string
      iak:
        $ref: '#/definitions/tpm2.IAKConfig'
      idevid:
        $ref: '#/definitions/tpm2.IDevIDConfig'
      keystore:
        $ref: '#/definitions/tpm2.KeyStoreConfig'
      lockout-auth:
        type: string
      platform_pcr:
        type: integer
      simulator:
        type: boolean
      ssrk:
        $ref: '#/definitions/tpm2.SRKConfig'
    type: object
  tpm2.EKConfig:
    properties:
      _platform_policy:
        type: boolean
      algorithm:
        type: string
      cert-handle:
        type: integer
      cn:
        type: string
      debug:
        type: boolean
      ecc:
        $ref: '#/definitions/keystore.ECCConfig'
      handle:
        type: integer
      hierarchy_auth:
        type: string
      password:
        type: string
      rsa:
        $ref: '#/definitions/keystore.RSAConfig'
    type: object
  tpm2.IAKConfig:
    properties:
      _platform_policy:
        type: boolean
      algorithm:
        type: string
      cert-handle:
        type: integer
      cn:
        type: string
      debug:
        type: boolean
      ecc:
        $ref: '#/definitions/keystore.ECCConfig'
      handle:
        type: integer
      hash:
        type: string
      password:
        type: string
      rsa:
        $ref: '#/definitions/keystore.RSAConfig'
      signature-algorithm:
        type: string
    type: object
  tpm2.IDevIDConfig:
    properties:
      _platform_policy:
        type: boolean
      algorithm:
        type: string
      cert-handle:
        type: integer
      cn:
        type: string
      debug:
        type: boolean
      ecc:
        $ref: '#/definitions/keystore.ECCConfig'
      handle:
        type: integer
      hash:
        type: string
      model:
        type: string
      pad:
        type: boolean
      password:
        type: string
      rsa:
        $ref: '#/definitions/keystore.RSAConfig'
      serial:
        type: string
      signature-algorithm:
        type: string
    type: object
  tpm2.KeyStoreConfig:
    properties:
      cn:
        type: string
      platform_policy:
        type: boolean
      srk-handle:
        type: integer
      srk_auth:
        type: string
    type: object
  tpm2.SRKConfig:
    properties:
      _platform_policy:
        type: boolean
      algorithm:
        type: string
      cn:
        type: string
      debug:
        type: boolean
      ecc:
        $ref: '#/definitions/keystore.ECCConfig'
      handle:
        type: integer
      hierarchy-auth:
        type: string
      password:
        type: string
      rsa:
        $ref: '#/definitions/keystore.RSAConfig'
    type: object
  webauthn.SessionData:
    properties:
      allowed_credentials:
        items:
          items:
            type: integer
          type: array
        type: array
      challenge:
        type: string
      expires:
        type: string
      extensions:
        $ref: '#/definitions/protocol.AuthenticationExtensions'
      rpId:
        type: string
      user_id:
        items:
          type: integer
        type: array
      userVerification:
        $ref: '#/definitions/protocol.UserVerificationRequirement'
    type: object
host: localhost:8443
info:
  contact:
    email: support@trusted-platform.io
    name: API Support
    url: https://www.trusted-platform.io/support
  description: The Trusted Platform RESTful Web Services API
  license:
    name: Commercial
    url: https://www.trusted-platform.io/licenses/commercial.txt
  termsOfService: https://www.trusted-platform.io/terms
  title: Trusted Platform
  version: v0.0.1
paths:
  /certificate:
    get:
      description: Returns the server public RSA key
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Retrieve the server x509 certificate
      tags:
      - System
  /config:
    get:
      description: Returns the server configuration
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.App'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebServiceResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.WebServiceResponse'
      security:
      - JWT: []
      summary: System configuration
      tags:
      - System
  /endpoints:
    get:
      description: Returns a list of REST API endpoints
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: REST API Endpoints
      tags:
      - System
  /events/{page}:
    get:
      description: Returns a page of system event log entries
      parameters:
      - description: string valid
        in: path
        maxLength: 20
        minLength: 1
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebServiceResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.WebServiceResponse'
      security:
      - JWT: []
      summary: System Event Log
      tags:
      - System
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and returns a new JWT
      parameters:
      - description: UserCredential struct
        in: body
        name: UserCredential
        required: true
        schema:
          $ref: '#/definitions/service.UserCredential'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jwt.JsonWebTokenClaims'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jwt.JsonWebTokenClaims'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/jwt.JsonWebTokenClaims'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jwt.JsonWebTokenClaims'
      summary: Authenticate and obtain JWT
      tags:
      - Authentication
  /login/refresh:
    get:
      consumes:
      - application/json
      description: Returns a new JWT token with a new, extended expiration date
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jwt.JsonWebTokenClaims'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jwt.JsonWebTokenClaims'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jwt.JsonWebTokenClaims'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jwt.JsonWebTokenClaims'
      security:
      - JWT: []
      summary: Refresh JWT
      tags:
      - Authentication
  /pubkey:
    get:
      description: Returns the server public RSA key
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Retrieve the server pubilc key
      tags:
      - System
  /status:
    get:
      description: Returns current system status metrics
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - JWT: []
      summary: System Status
      tags:
      - System
  /webauthn/registration/begin:
    post:
      consumes:
      - application/json
      description: Begins a new WebAuthn registration flow
      parameters:
      - description: UserCredential struct
        in: body
        name: UserCredential
        required: true
        schema:
          $ref: '#/definitions/service.UserCredential'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebServiceResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.WebServiceResponse'
      summary: Begin Registration
      tags:
      - WebAuthn
  /webauthn/registration/finish:
    post:
      consumes:
      - application/json
      description: Completes a pending WebAuthn login flow
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebServiceResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.WebServiceResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.WebServiceResponse'
      summary: Finish Login
      tags:
      - WebAuthn
  /webauthn/registration/status:
    get:
      consumes:
      - application/json
      description: Provides the current registration status for the Conditional UI
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebServiceResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.WebServiceResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.WebServiceResponse'
      summary: Registration Status
      tags:
      - WebAuthn
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
